plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'name.remal.sonarlint' version "4.2.1"
	id "org.sonarqube" version "5.0.0.4638"
}

group = 'com.simplyfelipe'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.jsonwebtoken:jjwt:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation platform('org.testcontainers:testcontainers-bom:1.19.8')
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:junit-jupiter'

	testRuntimeOnly 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	systemProperty 'spring.profiles.active', System.getProperty('profile') == null ? 'integration' : System.getProperty('profile')
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/simplyfelipe/microid/dto/*.*",
					"com/simplyfelipe/microid/entity/*.*",
					"com/simplyfelipe/microid/*Application*.*"
			])
		}))
	}

	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
sonarLint.nodeJs.logNodeJsNotFound = false
